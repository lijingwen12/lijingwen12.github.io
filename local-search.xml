<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TypeScript基础学习笔记</title>
    <link href="/2022/07/19/TypeScript/"/>
    <url>/2022/07/19/TypeScript/</url>
    
    <content type="html"><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><h2 id="一、基础类型"><a href="#一、基础类型" class="headerlink" title="一、基础类型"></a>一、基础类型</h2><p>typescript定义变量是时候，需要给变量添加类型说明。<br>比如定义boolean类型是时候需要在后面<code>: boolean</code>添加类型说明。</p><h4 id="1-boolean"><a href="#1-boolean" class="headerlink" title="1.boolean"></a>1.boolean</h4><p>最基本的数据类型就是简单的true&#x2F;false值，在JavaScript和TypeScript里叫做boolean（其它语言中也一样）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">isDone</span>: <span class="hljs-built_in">boolean</span>= <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><h4 id="2-number"><a href="#2-number" class="headerlink" title="2.number"></a>2.number</h4><p>和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是number。 除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">decLiteral</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">hexLiteral</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0xf00d</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">binaryLiteral</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0b1010</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">octalLiteral</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0o744</span>;<br></code></pre></td></tr></table></figure><h4 id="3-string"><a href="#3-string" class="headerlink" title="3.string"></a>3.string</h4><p>与JavaScript一样，可以使用双引号<code>&quot;&quot;</code>或单引号<code>&#39;&#39;</code>表示字符串<br>也可以使用模板字符串内嵌表达式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;liJIngWen&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">dataName</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`2022-07-18 + <span class="hljs-subst">$&#123;name&#125;</span>`</span><br></code></pre></td></tr></table></figure><h4 id="4-Arr-数组"><a href="#4-Arr-数组" class="headerlink" title="4.Arr(数组)"></a>4.Arr(数组)</h4><p>两种方式<br>第二种使用了在JavaScript里面没有的数组泛型，<code>Array&lt;元素类型&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><h4 id="5-元组"><a href="#5-元组" class="headerlink" title="5.元组"></a>5.元组</h4><p>元组类型是表示一个已知元素数量和类型的数组，各个元素的类型不必相同。<br>如下，定义一个<code>string</code>和<code>number</code>类型是元组.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>x = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>]; <span class="hljs-comment">// OK</span><br>x = [<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]; <span class="hljs-comment">// Error，ts也会报不能类型number分配给类型string</span><br></code></pre></td></tr></table></figure><p>当访问一个已知索引的元素，会得到正确的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x[<span class="hljs-number">0</span>].<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// OK</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x[<span class="hljs-number">1</span>].<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// Error, number类型上不存在substring</span><br></code></pre></td></tr></table></figure><p>当访问一个越界的元素：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>x = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>]; <span class="hljs-comment">// OK</span><br>x[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;world&#x27;</span>; <span class="hljs-comment">// 不能将类型“&quot;world&quot;”分配给类型“undefined”。</span><br>x[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;world&#x27;</span>; <span class="hljs-comment">// Error,不能将类型“string”分配给类型“number”。</span><br></code></pre></td></tr></table></figure><h4 id="6-枚举（enum）"><a href="#6-枚举（enum）" class="headerlink" title="6.枚举（enum）"></a>6.枚举（enum）</h4><p><code>enum</code>是对JavaScript标准数据类型的一个补充。<br>使用枚举类型可以为一组数值赋予友好的名字。<br>默认情况下，<code>元素的编号</code>是从<code>0</code>开始的，也可以指定元素的编号，<strong>注意</strong>的是，下一个的编号总是上一个的编号<code>+1</code>，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-title class_">Red</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title class_">Color</span>[<span class="hljs-number">0</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c)    <span class="hljs-comment">// 打印 Red</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)   <span class="hljs-comment">// 打印 2</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title class_">Colors</span>[<span class="hljs-number">2</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>, b);  <span class="hljs-comment">// 打印 Blue</span><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span> &#123;<span class="hljs-title class_">Red</span>, <span class="hljs-title class_">Green</span>=<span class="hljs-number">3</span>, <span class="hljs-title class_">Blue</span>, yellow, black=<span class="hljs-number">7</span>, brown&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Colors</span>);<br><span class="hljs-comment">//打印如下：</span><br>&#123;<br>  <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;Red&#x27;</span>,<br>  <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;Green&#x27;</span>,<br>  <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-string">&#x27;Blue&#x27;</span>,<br>  <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>,<br>  <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-string">&#x27;black&#x27;</span>,<br>  <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-string">&#x27;brown&#x27;</span>,<br>  <span class="hljs-title class_">Red</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-title class_">Green</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-title class_">Blue</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">yellow</span>: <span class="hljs-number">5</span>,<br>  <span class="hljs-attr">black</span>: <span class="hljs-number">7</span>,<br>  <span class="hljs-attr">brown</span>: <span class="hljs-number">8</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-任意值"><a href="#7-任意值" class="headerlink" title="7.任意值"></a>7.任意值</h4><p>在定义变量的时候，还不确定变量的类型，可能来自用户的输入或者第三方库。这时候我希望能够通过编译，可以使用<code>any</code>关键字标记这些变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">notValue</span>: <span class="hljs-built_in">any</span>;<br>notValue = <span class="hljs-string">&quot;Wen&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(notValue); <span class="hljs-comment">// Wen</span><br><br>notValue = <span class="hljs-literal">true</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(notValue); <span class="hljs-comment">// true</span><br><br>notValue = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(notValue); <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><p><code>any</code>在数组上也可以使用，当数组包含了不同类型，可以这样定义，在赋值的时候，也可以任意赋值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-built_in">any</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;str&quot;</span>];<br>list[<span class="hljs-number">0</span>] = <span class="hljs-literal">null</span>;<br>list[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>list[<span class="hljs-number">2</span>] = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;wen&quot;</span> &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list)   <span class="hljs-comment">// [ null, true, &#123; name: &#x27;wen&#x27; &#125; ]</span><br></code></pre></td></tr></table></figure><h4 id="8-空值"><a href="#8-空值" class="headerlink" title="8.空值"></a>8.空值</h4><p>当一个函数没有返回值时，它的返回类型是<code>void</code><br>声明一个空值类型的意义不大，因为它只能赋值<code>undefined</code>和<code>null</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">warnUser</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;This is my warning message&quot;</span>);<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">unusable</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><h4 id="9-Null和Undefined"><a href="#9-Null和Undefined" class="headerlink" title="9.Null和Undefined"></a>9.Null和Undefined</h4><p><code>Null</code>和<code>Undefined</code>类型相当于是所有类型的子类型，其他类型是可以给他们赋值<code>Null</code>或<code>Undefined</code>的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">warnUser</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;This is my warning message&quot;</span>);<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">unusable</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><p><strong>注意的是</strong>TypeScript 2.0 增加了对不可为空类型的支持。有一种新的严格空值检查模式，他提供了<code>strictNullChecks</code>来限制对空值的检查。可以通过在命令行上添加<code>--strictNullChecks</code>参数来启功严格空值检查。也可以在项目的<code>tsconfig.json</code>文件中启用<code>strictNullChecks</code>编译器选项。<br>在TS中，为了各版本的兼容，strictNullChecks的默认值是false</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;strictNullChecks&quot;</span>: <span class="hljs-literal">true</span><br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在严格空值检查模式下，null和undefined无法赋值给其他类型的变量。例如下面的代码在<strong>strictNullChecks&#x3D;true</strong>下，语法虽然没错，但是<strong>无法通过编译</strong>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">userName</span>: <span class="hljs-built_in">string</span>;<br>userName = <span class="hljs-string">&quot;小文&quot;</span>;  <span class="hljs-comment">// OK</span><br>userName = <span class="hljs-literal">null</span>;      <span class="hljs-comment">// OK</span><br>userName = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><p>在严格类型下，如果还想给变量赋值为空，需要使用联合类型，那么声明变量的时候需要这么声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">userName</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>;<br>userName = <span class="hljs-string">&quot;小文&quot;</span>;  <span class="hljs-comment">// OK</span><br>userName = <span class="hljs-literal">null</span>;      <span class="hljs-comment">// OK</span><br>userName = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// Error</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>;<br>age = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><p>在对象中也适用，并且的如果不想手动给age赋值，还可以这样定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">User</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> ;<br>  <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span><br>&#125;;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">user1</span>: <span class="hljs-title class_">User</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小文&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-literal">undefined</span> &#125;; <span class="hljs-comment">// OK</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">user2</span>: <span class="hljs-title class_">User</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小文&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;; <span class="hljs-comment">//OK</span><br><br><span class="hljs-comment">// 不手动赋值</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">User</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> ;<br>  age?:<span class="hljs-built_in">number</span> <br>&#125;;<br><span class="hljs-comment">// 此时，下面都是正确的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">user1</span>: <span class="hljs-title class_">User</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小文&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-literal">undefined</span> &#125;;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">user2</span>: <span class="hljs-title class_">User</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小文&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">23</span> &#125;;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">user3</span>: <span class="hljs-title class_">User</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小文&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><p>在严格模式下，编译是还会有变量可空的安全检查，如果变量包含<code>null</code>或者<code>undefined</code>，则访问任何属性都会编译错误：<br>在访问属性时，需要变量值不能为空<br><strong>注意</strong>参数也有可能是函数类型，ts也会将该参数加上<code>undefined</code>类型，这时候也需要判断空值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLength</span>(<span class="hljs-params">userName: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span></span>) &#123;  <span class="hljs-comment">// 编译错误</span><br>  <span class="hljs-keyword">return</span> userName.<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLength</span>(<span class="hljs-params">userName: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span></span>) &#123;  <span class="hljs-comment">// 编译成功</span><br>  <span class="hljs-keyword">if</span>(userName === <span class="hljs-literal">null</span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> userName.<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLength</span>(<span class="hljs-params">callback?: () =&gt; <span class="hljs-built_in">void</span> </span>) &#123;  <span class="hljs-comment">// 编译成功</span><br>  <span class="hljs-keyword">if</span>(callback)&#123;<br>    <span class="hljs-title function_">callback</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-Never"><a href="#10-Never" class="headerlink" title="10.Never"></a>10.Never</h4><p><code>Never</code>类型表示的是那些永不存在的值类型。它是总会抛出异常或者没有返回值的函数表达式 或 箭头函数表达式的返回值类型，变量也有可能是<code>never</code>类型，仅当他们被永不为真的类型保护所约束时。<br><code>Never</code>类型也是任何类型的子类型，可以赋值给任何类型。只有<code>Never</code>类型能赋值给它本身，其他类型都不能赋值给<code>Never</code>，即使是<code>any</code>。<br>下面是一些返回never类型的函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 返回never的函数必须存在无法达到的终点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">never</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message);<br>&#125;<br><br><span class="hljs-comment">// 推断的返回值类型为never</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Something failed&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 返回never的函数必须存在无法达到的终点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">infiniteLoop</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">never</span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-类型断言"><a href="#11-类型断言" class="headerlink" title="11.类型断言"></a>11.类型断言</h4><p>当你在项目开发时，你很确切某个值是什么类型，你可以类型断言这种方式告诉编译器，类似于类型转换，它不影响运行结果，只是在编译阶段起作用。<br>它有两种使用方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 第一种：‘尖括号’语法</span><br><span class="hljs-keyword">let</span> len = (&lt;<span class="hljs-built_in">string</span>&gt;str).<span class="hljs-property">length</span>; <br><span class="hljs-comment">// 有兼容性问题, 在使用到了JSX的时候兼容性不是很好</span><br><br><span class="hljs-comment">// 第二种：as </span><br><span class="hljs-keyword">let</span> len = (str <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-property">length</span>;<br><br><span class="hljs-comment">// 向编译器解释 str 就是string类型</span><br></code></pre></td></tr></table></figure><p>作用：当我在开发阶段，定义了一个<code>any</code>类型是值给用户输入，但是我确切知道，用户输入的是<code>string</code>类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;用户的输入&#x27;</span><br><span class="hljs-comment">// 当还是any的时候是没有.length的提示的</span><br><span class="hljs-keyword">let</span> len = (str <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-property">length</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(len);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小文的7月17</title>
    <link href="/2022/07/17/2022-07-17/"/>
    <url>/2022/07/17/2022-07-17/</url>
    
    <content type="html"><![CDATA[<p>今天看着文档修改了一下博客的布置，暂时还没想到要记录什么，感觉什么都没干已经到晚上了！</p>]]></content>
    
    
    <categories>
      
      <category>日常生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>小文7月16号</title>
    <link href="/2022/07/16/%E5%B0%8F%E6%96%877%E6%9C%8816%E5%8F%B7/"/>
    <url>/2022/07/16/%E5%B0%8F%E6%96%877%E6%9C%8816%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>小文在这一天并没有留下什么内容~~~~~~~</p>]]></content>
    
    
    <categories>
      
      <category>日常生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/16/hello-world/"/>
    <url>/2022/07/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
