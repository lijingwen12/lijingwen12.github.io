<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ts(简洁重新整理)</title>
    <link href="/2022/08/24/ts/"/>
    <url>/2022/08/24/ts/</url>
    
    <content type="html"><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><h2 id="一、安装和编译"><a href="#一、安装和编译" class="headerlink" title="一、安装和编译"></a>一、安装和编译</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 全局安装</span><br>npm install -g typescript<br><br><span class="hljs-comment">// TS不能直接运行,需要编译成js代码,再去运行js</span><br><span class="hljs-comment">// 编译</span><br>tsc greeter.<span class="hljs-property">ts</span><br><span class="hljs-comment">// 编译过后,同目录会出现一个名字相同的 greeter.js 文件</span><br>node greeter.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 此时每次修改ts文件,都需要重新编译</span><br><span class="hljs-comment">// 使用 tsc greeter.ts -w   &quot; -w &quot; 可以监听文件,帮我们自动编译</span><br><span class="hljs-comment">// 缺点: 一次只能监听一个ts文件</span><br>tsc greeter.<span class="hljs-property">ts</span> -w<br><br><span class="hljs-comment">// 想一次编译目录下所有 ts 文件</span><br><span class="hljs-comment">// 手动在目录下创建 tsconfig.json 文件(ts的配置文件)</span><br><span class="hljs-comment">// 里面内容只需要输入一个 &#123;&#125;</span><br>&#123;<br><br>&#125;<br><span class="hljs-comment">// 在目录下运行 tsc 就可以编译所有 ts 文件了</span><br></code></pre></td></tr></table></figure><h2 id="二、基础类型"><a href="#二、基础类型" class="headerlink" title="二、基础类型"></a>二、基础类型</h2><table><thead><tr><th>类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td>number</td><td align="center">1，-33，2.5</td><td align="center">任意数字</td></tr><tr><td>string</td><td align="center">“hello”,”wen”</td><td align="center">任意字符串</td></tr><tr><td>boolean</td><td align="center">true、false</td><td align="center">布尔值 true 或者 false</td></tr><tr><td>字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td>unknown</td><td align="center">*</td><td align="center">类型安全的 any</td></tr><tr><td>void</td><td align="center">空值（undefined）</td><td align="center">没有值或者 undefined</td></tr><tr><td>never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td>object</td><td align="center">{name: “zs”}</td><td align="center">js 对象</td></tr><tr><td>array</td><td align="center">[1,2,3]</td><td align="center">js 数组</td></tr><tr><td>tuple</td><td align="center">[4,5]</td><td align="center">元素，TS 新增类型，固定长度的数组</td></tr><tr><td>enum</td><td align="center">enum{A,B}</td><td align="center">枚举，TS 新增类型</td></tr></tbody></table><h4 id="number-string-boolean"><a href="#number-string-boolean" class="headerlink" title="number | string | boolean"></a>number | string | boolean</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 定义</span><br><span class="hljs-comment">// let 变量: 类型</span><br><span class="hljs-comment">// let 变量: 类型 = 值</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span>;<br>num = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">isDone</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br><br><span class="hljs-comment">// 字面量 (一般不使用)</span><br><span class="hljs-comment">// 10 表示是 a 的类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">10</span>; <span class="hljs-comment">// ok</span><br>a = <span class="hljs-number">11</span>; <span class="hljs-comment">// error</span><br><br><span class="hljs-comment">// 有时候可以这么使用</span><br><span class="hljs-comment">// 使用 | 来连接多个类型(联合类型)</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;hello&quot;</span> | <span class="hljs-string">&quot;world&quot;</span>;<br>b = <span class="hljs-string">&quot;hello&quot;</span>;<br>b = <span class="hljs-string">&quot;world&quot;</span>;<br><br><span class="hljs-comment">// 一般使用这个比较广泛</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-built_in">boolean</span> | <span class="hljs-built_in">string</span>;<br>c = <span class="hljs-literal">true</span>;<br>c = <span class="hljs-string">&quot;hello&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="any-unknown"><a href="#any-unknown" class="headerlink" title="any | unknown"></a>any | unknown</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// any 表示的是任意类型</span><br><span class="hljs-comment">// 不建议使用,相当于关闭TS类型检测</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">d</span>: <span class="hljs-built_in">any</span>;<br>d = <span class="hljs-number">10</span>;<br>d = <span class="hljs-string">&quot;hello&quot;</span>;<br>d = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// 声明变量不指定类型,TS解析器会自动判断它为 any</span><br><span class="hljs-keyword">let</span> d;<br>d = <span class="hljs-number">10</span>;<br>d = <span class="hljs-string">&quot;hello&quot;</span>;<br>d = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// 如果遇到不确定类型的变量的需求,可以使用 unknown</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">d</span>: <span class="hljs-built_in">unknown</span>;<br>d = <span class="hljs-number">10</span>;<br>d = <span class="hljs-string">&quot;hello&quot;</span>;<br>d = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// unknown 和 any 作用类似,都可以任意赋值</span><br><span class="hljs-comment">// 区别,any可以赋值给任意类型的变量,unknown则只能赋值给unknown类型的变量</span><br><span class="hljs-comment">// 此时如果使用any,赋值给其他类型的变量,会出现类型改变的效果,所以不建议使用</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">any</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: <span class="hljs-built_in">unknown</span> = <span class="hljs-literal">false</span>;<br>str = a; <span class="hljs-comment">// ok</span><br>str = b; <span class="hljs-comment">// error</span><br><br><span class="hljs-comment">// 如果想把值赋值给 指定类型的变量,有以下几种方式</span><br><span class="hljs-comment">// 1. 判断类型</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> b === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>  str = b;<br>&#125;<br><span class="hljs-comment">// 2. 类型断言</span><br><span class="hljs-comment">// 可以用来告诉解析器实际类型，前提是你确定它就是 string, 有两种写法</span><br>str = e <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>;<br>str = &lt;<span class="hljs-built_in">string</span>&gt;e;<br></code></pre></td></tr></table></figure><h4 id="void-never"><a href="#void-never" class="headerlink" title="void | never"></a>void | never</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// void 用来表示空，一般用来表示函数没有返回值，</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fu</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;&#125;<br><br><span class="hljs-comment">// never 用来表示永远不会返回结果</span><br><span class="hljs-comment">// 比如抛错，程序抛错，不会进行下去，所以不会有返回结果</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">never</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;报错了！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>在定义函数或是类时，如果遇到类型不明确就可以使用泛型<br>当然也可以，使用 any 解决，但是不推荐<br>因为，你只能知道，你的参数类型是 any 返回值类型也是 any, 不能确定你的参数类型和返回值类型是一样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 这时候可以使用泛型</span><br><span class="hljs-comment">// 名字可以任意取，T表示任意类型，具体类型是当函数调用时根据传参来确定</span><br><span class="hljs-comment">// (a: T)表示a 的类型 是T</span><br><span class="hljs-keyword">function</span> fn&lt;T&gt;(<span class="hljs-attr">a</span>: T): T &#123;<br>  <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">// 可以直接调用</span><br><br><span class="hljs-comment">// 因为我传进入的参数的 number 类型，值为10</span><br><span class="hljs-comment">// 所以 T 就是 number 类型，参数 a 也是 number类型，返回值也是number类型</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 不指定泛型，TS自动对类型进行推断</span><br><br>fn&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 指定泛型</span><br><br><span class="hljs-comment">// 指定多个泛型</span><br><span class="hljs-keyword">function</span> fn2&lt;T, k&gt;(<span class="hljs-attr">a</span>: T, <span class="hljs-attr">b</span>: K): T &#123;<br>  <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-title function_">fn2</span>(<span class="hljs-number">123</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">// 建议书写时指定类型，更加直观</span><br>fn2&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">123</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-comment">// 有时候,任意的例如 T, K 类型范围过大</span><br><span class="hljs-comment">// 我们也可以使用 type 或者 interface 或 class 关键字处理</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">function</span> fn3&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Inter</span>&gt;(<span class="hljs-attr">a</span>: T): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> a.<span class="hljs-property">length</span>;<br>&#125;<br><span class="hljs-comment">// 这时候参数 a 必须能够实现 Inter 接口,也就是 a 必须拥有 length 属性才可以</span><br><span class="hljs-title function_">fn3</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// ok,字符串拥有length</span><br><span class="hljs-title function_">fn3</span>(<span class="hljs-number">122</span>); <span class="hljs-comment">// error,字符串拥有length</span><br><span class="hljs-title function_">fn3</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">5</span> &#125;); <span class="hljs-comment">// ok,拥有length</span><br><br><span class="hljs-comment">// 除了 函数可以使用泛型, 类也可以使用泛型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&lt;T&gt; &#123;<br>  <span class="hljs-attr">name</span>: T;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: T</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> mc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;zs&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小文的7月17</title>
    <link href="/2022/07/17/2022-07-17/"/>
    <url>/2022/07/17/2022-07-17/</url>
    
    <content type="html"><![CDATA[<p>今天看着文档修改了一下博客的布置，暂时还没想到要记录什么，感觉什么都没干已经到晚上了！</p>]]></content>
    
    
    <categories>
      
      <category>日常生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>小文7月16号</title>
    <link href="/2022/07/16/%E5%B0%8F%E6%96%877%E6%9C%8816%E5%8F%B7/"/>
    <url>/2022/07/16/%E5%B0%8F%E6%96%877%E6%9C%8816%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>小文在这一天并没有留下什么内容~~~~~~~</p>]]></content>
    
    
    <categories>
      
      <category>日常生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/16/hello-world/"/>
    <url>/2022/07/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
